package graph

import "github.com/pocketbase/pocketbase"

templ Main(app *pocketbase.PocketBase, project_id string) {
	{{node_types := GetNodeTypes(app)}}
	{{edge_types := GetEdgeTypes(app)}}
	<div id="workspace" 
		class="workspace"
	>
		<div id="canvas-container" class="canvas-container"></div>
		<div id="control-panel" class="control-panel">
			@header()
			@ControlPanelSection("Sorting") {
				<div class="control-panel__button-group">
					<button koppla-click="sort" title="Fruchterman-Reingold esque sorting">
						<span class="material-symbols-outlined">graph_3</span>
					</button>
					<button koppla-click="sort" title="Hierarchy based sorting" disabled>
						<span class="material-symbols-outlined">graph_1</span>
					</button>
				</div>
			}
			@ControlPanelSection("Position") {
				<div class="control-panel__button-group">
					<button koppla-click="alignVert">
						<span class="material-symbols-outlined">align_justify_space_even</span>
					</button>
					<button koppla-click="alignHoriz">
						<span class="material-symbols-outlined">align_space_even</span>
					</button>
					<button koppla-click="evenHoriz">
						<span class="material-symbols-outlined">horizontal_distribute</span>
					</button>
					<button data-on-click="$driver.graph.evenVert($driver.selected_node_handles)">
						<span class="material-symbols-outlined">vertical_distribute</span>
					</button>
				</div>
			}
			@ControlPanelSection("Select") {
				@NodeTypeSelect(app)
			}
			@Footer()
		</div>
		<dialog
			id="create-edge-dialog"
		>
			<p>Choose connection type</p>
			<form id="create-edge-form" method="dialog" koppla-submit="createEdge">
				<label> Type: 
					<select name="type" koppla-value="edge_type_signal" id="edge-type-select">
					</select>
				</label>
				<div class="btn-container">
					<button id="close">Create</button>
				</div>
			</form>
		</dialog>
		<script type="module">
			import {CanvasGUIDriver, wasm_url, throttle} from "/dist/index.js";

			const node_types = JSON.parse({{templ.JSONString(node_types)}});
			const edge_types = JSON.parse({{templ.JSONString(edge_types)}});

			console.log(node_types, edge_types)

			window.canvas_gui = new CanvasGUIDriver({
				container_id: "canvas-container",
				control_panel_id: "control-panel",
				wasm_url
			})

			window.canvas_gui.run({
				edge_types,
				node_types
			}, [
				{
					name: "Product owners",
					type: "qgo5vvmzgdmdhs3",
					edges_outgoing: [],
					edges_incoming: [],
					metadata: '{"id": "po"}'
				},
				{
					name: "Developers",
					type: "qgo5vvmzgdmdhs3",
					edges_outgoing: [],
					edges_incoming: [],
					metadata: '{"id": "devs"}'
				},
			]).then((graph) => {
				const log_save = throttle(() => {
					console.log({
						nodes: graph.getNodes(),
						edges: graph.getEdges()
					})
				}, 2000)
				graph.on("world:update", log_save)
			})
		</script>
	</div>
}

templ Footer() {
	<div class="control-panel__section control-panel__section--footer">
		<dialog data-ref="tooltips">
			<div class="tooltips">
				<div><span>ctrl</span> + <span>drag</span>: pan</div>
				<div><span>shift</span> + <span>drag</span>: connect</div>
				<div><span>del</span>: delete selected</div>
				<div><span>backspace</span>: delete selected connections</div>
				<div><span>scroll</span>: zoom</div>
			</div>
		</dialog>
		<button data-on-click='$tooltips.showModal()' koppla-click="openToolTips">
		<span class="material-symbols-outlined">question_mark</span>
		</button>
	</div>
}

templ header() {
	<div class="control-panel__section control-panel__section--header">
		<div id="user-card" data-on-load="@get('/auth/user')"></div>
	</div>
}

templ ControlPanelSection(title string) {
	<div class="control-panel__section">
		<p>{title}</p>
		{ children... }
	</div>
}

templ NodeTypeSelect(app *pocketbase.PocketBase) {
	{{nodetypes := *GetNodeTypes(app)}}
	<select>
	for _, n := range nodetypes {
		<option value={n.Id}>{n.Name}</option>
	}
	</select>
}
